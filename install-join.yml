---
- hosts: all
  become: true
  vars:
    docker_version: '18.09.9-3.el7.x86_64'
    kube_version: "1.29.2-1.1"
    kubernetes_minor_version: "v1.33"

  tasks:
    - name: Disable SWAP
      shell: swapoff -a

    - name: Disable swap permanently
      replace:
        path: /etc/fstab
        regexp: '^([^#].* swap .*)$'
        replace: '# \1'

    - name: Activate netfilter
      modprobe:
        name: br_netfilter
        state: present

    - name: Enable netfilter permanently
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1
        state: present
        reload: yes

    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Convert Docker GPG key to .gpg format
      command: >
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable
        mode: '0644'

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker & containerd
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Copy docker daemon config
      copy:
        src: ./daemon.json
        dest: /etc/docker/daemon.json

    - name: Remove old containerd config
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Ensure containerd config directory exists
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        executable: /bin/bash

    - name: Enable SystemdCgroup in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup = false'
        replace: '            SystemdCgroup = true'

    - name: Restart containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    - name: Remove old Kubernetes keys and repos
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/kubernetes.list
        - /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Create Kubernetes keyring dir
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
        dest: /tmp/k8s-release.key

    - name: Add Kubernetes GPG key to keyring
      shell: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/k8s-release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /

    - name: Set permissions on Kubernetes key
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes packages
      shell: apt-mark hold kubelet kubeadm kubectl

# Master setup
- hosts: master
  become: true
  tasks:
    - name: Get master's private IP
      shell: hostname -I | awk '{print $1}'
      register: private_ip

    - name: Initialize Kubernetes cluster
      command: kubeadm init --ignore-preflight-errors=all --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address={{ private_ip.stdout }}
      register: kubeadm_init
      when: private_ip.stdout != ""

    - name: Create kube config directory
      file:
        path: /root/.kube
        state: directory
        mode: 0700

    - name: Copy admin config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    - name: Install Calico CNI
      shell: |
        kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml
      environment:
        KUBECONFIG: /root/.kube/config

    - name: Generate kubeadm join command
      shell: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to file
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/kube_join.sh
        mode: '0755'

    - name: Fetch join command to controller
      fetch:
        src: /tmp/kube_join.sh
        dest: /tmp/kube_join.sh
        flat: yes

# Worker node setup
- hosts: workers
  become: true
  tasks:
    - name: Reset node before joining cluster (clean previous attempts)
      command: kubeadm reset -f

    - name: Clean up Kubernetes related directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/cni/net.d
        - /var/lib/cni
        - /var/lib/kubelet
        - /etc/kubernetes
        - /var/lib/etcd


    - name: Copy join command script to worker
      copy:
        src: /tmp/kube_join.sh
        dest: /tmp/kube_join.sh
        mode: '0755'

    - name: Join the cluster
      command: sh /tmp/kube_join.sh

