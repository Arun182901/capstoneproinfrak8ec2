---
- hosts: all
  become: true
  vars:
    - docker_version: '18.09.9-3.el7.x86_64'
    - kube_version: "1.29.2-1.1"
    - kubernetes_minor_version: "v1.33"

  tasks:
    - name: Disable SWAP
      shell: swapoff -a

    - name: Create disable swap fstab
      shell: line=$(grep -n -m 1 swap /etc/fstab | cut -d ":" -f 1) && sed -e "${line}s/^/#/" /etc/fstab > /etc/fstab.bk

    - name: Disabled Swap
      shell: cp /etc/fstab.bk /etc/fstab

    - name: Activate netfilter
      shell: modprobe br_netfilter

    - name: Test if netfilter is already enabled
      shell: if grep -q "^net.bridge.bridge-nf-call-iptables = 1" /etc/sysctl.conf; then echo false; else echo true;  fi
      register: test_grep

    - name: Enable netfilter config if not already enabled
      lineinfile:
        dest: /etc/sysctl.conf
        line: net.bridge.bridge-nf-call-iptables = 1
      when: test_grep.stdout == "true"

    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Convert Docker GPG key to .gpg format
      command: >
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository using keyring
      copy:
        dest: /etc/apt/sources.list.d/docker.list
        content: |
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable
        mode: '0644'

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Copy docker daemon.json config
      copy:
        src: ./daemon.json
        dest: /etc/docker/daemon.json
        follow: yes

    - name: Remove old containerd config
      file:
        path: /etc/containerd/config.toml
        state: absent

    - name: Generate default containerd config
      shell: "containerd config default > /etc/containerd/config.toml"
      args:
        executable: /bin/bash

    - name: Enable SystemdCgroup in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup = false'
        replace: '            SystemdCgroup = true'

    - name: Restart containerd
      systemd:
        name: containerd
        enabled: true
        state: restarted

    - name: Remove old Kubernetes APT key and repo
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/kubernetes.list
        - /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Create keyrings directory for Kubernetes
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
        dest: /tmp/k8s-release.key

    - name: Add Kubernetes GPG key to keyring
      shell: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/k8s-release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /

    - name: Set correct permissions on Kubernetes GPG key
      file:
        path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages at current version
      shell: "apt-mark hold kubelet kubeadm kubectl"

- hosts: master
  become: true
  tasks:
    - name: Initialize Kubernetes cluster
      command: kubeadm init --ignore-preflight-errors=all --pod-network-cidr=192.168.0.0/16
      register: kubeadm_init

    - name: Create .kube directory
      file:
        path: /root/.kube
        state: directory
        mode: 0700

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes

    - name: Install Calico network plugin
      shell: |
        kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml
      environment:
        KUBECONFIG: /root/.kube/config

    - name: Get kubeadm join command
      shell: kubeadm token create --print-join-command
      register: join_command_output

    - name: Set join command fact
      set_fact:
        kubeadm_join_cmd: "{{ join_command_output.stdout }}"

- hosts: workers
  become: true
  tasks:
    - name: Join worker nodes to the cluster
      shell: "{{ hostvars['master']['kubeadm_join_cmd'] }} --ignore-preflight-errors=all"

